emissions <- scan()
mean_emissions = mean(emissions)
mode(emissions) = mode(emissions)
mode = mode(emissions)
install.packages("shiny")
emissions <- scan() #Allows you to read all the grouped data
mean_emissions = mean(emissions) #Calculate the average of emissions
#Function for mode:
mode <- function(x){
ux <- unique(x); #Vector containing each unique element of the original vector
count <- tabulate(match(x,ux)); #Counts how many times each element occurs
if(all(count ==1)){
return(NA); #If no elements are repeated,there is no mode
}else{
return(ux[which.max(count)]); #If there are repetitions,get the most frequent element
}
}
mode_emissions = mode(emissions);
#Function for mode:
mode <- function(x){
ux <- unique(x); #Vector containing each unique element of the original vector
count <- tabulate(match(x,ux)); #Counts how many times each element occurs
if(all(count ==1)){
return(NA); #If no elements are repeated,there is no mode
}else{
return(ux[which.max(count)]); #If there are repetitions,get the most frequent element
}
}
median_emissions = median(emissions);
amplitude_emissions = range(emissions);
amplitude_emissions = diff(range(emissions));#
variance_emissions = var(emissions);
stdev_emissions = sqrt(variance_emissions); #Calculates the standart deviation of emissions
source("~/UFC/Materias/S4/Estatística/Homework/q1.R", echo = TRUE)
coefVar_emissions = (stDev_emissions/mean_emissions) * 100;
stDev_emissions = sqrt(variance_emissions); #Calculates the standart deviation of emissions
coefVar_emissions = (stDev_emissions/mean_emissions) * 100;
clear
clear()
rm(list = ls())
emissions <- scan(); #Allows you to read all the grouped data
#Central tendency measures:
mean_emissions = mean(emissions); #Calculates the average of emissions
median_emissions = median(emissions); #Calculates the median of emissions
#Function for mode:
mode <- function(x){
ux <- unique(x); #Vector containing each unique element of the original vector
count <- tabulate(match(x,ux)); #Counts how many times each element occurs
if(all(count ==1)){
return(NA); #If no elements are repeated,there is no mode
}else{
return(ux[which.max(count)]); #If there are repetitions,get the most frequent element
}
}
mode_emissions = mode(emissions); #Calculates the mode of emissions
#Dispersion measures:
amplitude_emissions = diff(range(emissions));
#Calculates the amplitude of emissions(difference between the largest and the smallest value)
variance_emissions = var(emissions); #Calculates the variance of emissions
stDev_emissions = sqrt(variance_emissions); #Calculates the standart deviation of emissions
coefVar_emissions = (stDev_emissions/mean_emissions) * 100;
plot(list = ls())
hist(emissions,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(emissions,
freq = FALSE,        # usa densidade em vez de contagem
col = "lightblue",   # cor das barras
main = "Distribuição de Emissões",
xlab = "Emissões")
hist(emissions,
freq = FALSE,        # usa densidade em vez de contagem
col = "lightblue",   # cor das barras
main = "Distribuição de Emissões",
xlab = "Emissões")
hist(emissions,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(emissions,
freq = FALSE,        # usa densidade em vez de contagem
col = "lightblue",   # cor das barras
main = "Distribuição de Emissões",
xlab = "Emissões")
hist(emissions,
freq = FALSE,
col = "lightblue",
main = "Densidade das Emissões",
xlab = "Emissões")
lines(density(emissions), col = "red", lwd = 2)
hist(emissions,
freq = FALSE,
col = "lightblue",
main = "Distribuição com Densidade")
lines(density(emissions), col = "red", lwd = 2)
hist(emissions,
freq = FALSE,
col = "lightblue",
main = "Densidade das Emissões",
xlab = "Emissões")
lines(density(emissions), col = "red", lwd = 2)
hist(emissions,
freq = FALSE,        # usa densidade em vez de contagem
col = "lightblue",   # cor das barras
main = "Distribuição de Emissões",
xlab = "Emissões")
hist(emissions,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(emissions,
title = "emissions hist",
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(Emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
boxplot(emissions,
main = "Emissions",
col = "lightgreen",
border = "black")
par(mfrow = c(1,2));
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
boxplot(emissions,
main = "Emissions",
col = "lightgreen",
border = "black")
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
#creates our box plot
boxplot(emissions,
main = "Emissions",
col = "lightgreen",
border = "black")
par(mfrow = c(1, 1)); #Turn the frame normal again
par(mfrow = c(1, 1)); #Turn the frame normal again
boxplot(emissions,
main = "Emissions",
col = "lightgreen",
border = "black")
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
par(mfrow = c(1,2));#Divides the frame in two columns
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
boxplot(emissions,
main = "Emissions",
col = "lightgreen",
border = "black")
boxplot(emissions,
main = "Emissions",
col = "skyblue",
border = "black")
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Frequency",
col = "skyblue",
border = "black")
remove(ls.all)
emissions <- scan(); #Allows you to read all the grouped data
# --- ITEM 1 --- #
#Central tendency measures:
mean_emissions <- mean(emissions); #Calculates the mean of emissions
median_emissions <- median(emissions); #Calculates the median of emissions
#Function for mode:
get_mode <- function(x){
ux <- unique(x); #Vector containing each unique element of the original vector
count <- tabulate(match(x,ux)); #Counts how many times each element occurs
if(all(count == 1)){
return(NA); #If no elements are repeated,there is no mode
}else{
return(ux[which.max(count)]); #If there are repetitions,get the most frequent element
}
}
mode_emissions <- get_mode(emissions); #Calculates the mode of emissions
#Dispersion measures:
amplitude_emissions <- diff(range(emissions));
#Calculates the amplitude of emissions
#(difference between the largest and the smallest values)
variance_emissions <- var(emissions); #Calculates the variance of emissions
stDev_emissions <- sqrt(variance_emissions); #Calculates the standard deviation of emissions
coefVar_emissions <- (stDev_emissions/mean_emissions) * 100;
#Calculates the coefficient of variation of emissions
# --- ITEM 2 --- #
par(mfrow = c(1,2));#Divides the frame in two columns
#Creates our histogram
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Density",
col = "skyblue",
border = "black")
#creates our box plot
boxplot(emissions,
main = "Emissions",
col = "skyblue",
border = "black")
par(mfrow = c(1, 1)); #Turn the frame normal again
# --- ITEM 3 --- #
q1_emissions = quantile(emissions, 0.25); #Calculates the Quartile 1
q2_emissions = quantile(emissions, 0.5); #Calculates the Quartile 2
q3_emissions = quantile(emissions, 0.75); #Calculates the Quartile 3
IQR_emissions = IQR(emissions); #Calculates the IQR from emissions
# --- ITEM 4 --- #
exceed_limit <- emissions > 25; #Logical vector: TRUE if emission > 25
days_exceeded <- sum(exceed_limit); #Count of days exceeding the limit
total_days <- length(emissions); #Total number of emissions records
exceed_proportion <- days_exceeded/total_days; #Proportion of exceed days
#Questão 2
idades <- c(28, 34, 46, 26, 37, 29, 51, 31, 39, 43, 58, 44, 25, 23, 52, 42, 48, 33, 38, 46)
#Nacionalidades: italiana, inglesa, belga, espanhola, francesa, alemana
nacionalidade <- c("Italiana", "Inglesa", "Belga", "Espanhola", "Italiana", "Espanhola", "Francesa", "Belga", "Italiana", "Italiana", "Italiana", "Inglesa", "Francesa", "Espanhola", "Italiana", "Alemana", "Francesa", "Italiana", "Alemana", "Italiana"
)
renda <- c(2.3, 1.6, 1.2, 0.9, 2.1, 1.6, 1.8, 1.4, 1.2, 2.8, 3.4, 2.7, 1.6, 1.2, 1.1, 2.5, 2.0, 1.7, 2.1, 3.2)
experiencia <- c(2, 8, 21, 1, 15, 3, 28, 5, 13, 20, 32, 23, 1, 0, 29, 18, 19, 7, 12, 23)
curriculos <- data.frame(idades, nacionalidade, renda, experiencia)
# Estatísticas descritivas
#item 1
#Informações
Informações <- c("Idade", "Renda", "Experiência")
#Medias
media_Idades <- mean(idades)
media_Renda <- mean(renda)
media_Experiencia <- mean(experiencia)
Media <- c(media_Idades, media_Renda, media_Experiencia)
#Medianas
mediana_Idades <- median(idades)
mediana_Renda <- median(renda)
mediana_Experiencia <- median(experiencia)
Mediana <- c(mediana_Idades, mediana_Renda, mediana_Experiencia)
#Desvio padrão
desvio_Idades <- sd(idades)
desvio_Renda <- sd(renda)
desvio_Experiencia <- sd(experiencia)
Desvio_Padrão <- c(desvio_Idades, desvio_Renda, desvio_Experiencia)
estatisticas = data.frame(Informações,Media, Mediana, Desvio_Padrão)
print(estatisticas)
#item 2
library(dplyr)
rm(list = ls())
emissions <- scan(); # Allows you to read all the grouped data
# --- ITEM 1 --- #
# Central tendency measures:
mean_emissions <- mean(emissions); # Calculates the mean of emissions
median_emissions <- median(emissions); # Calculates the median of emissions
# Function for mode:
get_mode <- function(x){
ux <- unique(x); # Vector containing each unique element of the original vector
count <- tabulate(match(x,ux)); # Counts how many times each element occurs
if(all(count == 1)){
return(NA); # If no elements are repeated, there is no mode
}else{
return(ux[which.max(count)]); # If there are repetitions, get the most frequent element
}
}
mode_emissions <- get_mode(emissions); # Calculates the mode of emissions
# Dispersion measures:
amplitude_emissions <- diff(range(emissions));
# Calculates the range of emissions (difference between the largest and the smallest values)
variance_emissions <- var(emissions); # Calculates the variance of emissions
stDev_emissions <- sqrt(variance_emissions); # Calculates the standard deviation of emissions
coefVar_emissions <- (stDev_emissions/mean_emissions) * 100;
# Calculates the coefficient of variation of emissions
# --- ITEM 2 --- #
par(mfrow = c(1,2)); # Divides the plot area into two columns
# Creates our histogram
hist(emissions,
freq = FALSE,
xlab = "Emissions Values",
ylab = "Density",
main = "Emissions Histogram", # Title adjusted
col = "skyblue",
border = "black")
# Creates our box plot
boxplot(emissions,
main = "Emissions Boxplot", # Title adjusted
col = "skyblue",
border = "black")
par(mfrow = c(1, 1)); # Returns the plot area configuration to normal
# --- ITEM 3 --- #
q1_emissions = quantile(emissions, 0.25); # Calculates Quartile 1
q2_emissions = quantile(emissions, 0.5); # Calculates Quartile 2
q3_emissions = quantile(emissions, 0.75); # Calculates Quartile 3
IQR_emissions = IQR(emissions); # Calculates the IQR of emissions
# --- ITEM 4 --- #
days_exceeded <- sum(emissions > 25); # Count of days exceeding the limit
total_days <- length(emissions); # Total number of emissions records
exceed_proportion <- days_exceeded/total_days; # Proportion of exceeded days
# File read
setwd("C:\\Users\\savli\\Documents\\GitHub\\Homework_01");
dataBikes <- read.csv("HW1_bike_sharing.csv", header = TRUE);
# ---- Item 1 ----#
observationNumber <- nrow(dataBikes);
startDate <- dataBikes$dteday[1];
endDate <- dataBikes$dteday[observationNumber];
# ---- Item 2 ----#
# Measures of Central Tendency
tempMean <- mean(dataBikes$temp);
tempMedian <- median(dataBikes$temp);
tempQuantile <- quantile(dataBikes$temp,
probs = c(0.25, 0.5, 0.75))
casualMean <- mean(dataBikes$casual);
casualMedian <- median(dataBikes$casual);
casualQuantile <- quantile(dataBikes$casual,
probs = c(0.25, 0.5, 0.75));
registeredMean <- mean(dataBikes$registered);
registeredMedian <- median(dataBikes$registered);
registeredQuantile <- quantile(dataBikes$registered,
probs = c(0.25, 0.5, 0.75));
# Table with the measures
centralTendTable <- data.frame(
variable = c("temp", "casual", "registered"),
Mean = c(tempMean, casualMean, registeredMean),
Median = c(tempMedian, casualMedian, registeredMedian),
Q1 = c(tempQuantile[1], casualQuantile[1], registeredQuantile[1]),
Q3 = c(tempQuantile[3], casualQuantile[3], registeredQuantile[3])
)
cat("Statistical Summary of Numeric Variables\n")
print(centralTendTable)
# ---- Item 3 ----#
# Replace the numbers with their names of representation
dataBikes$season <- factor(dataBikes$season,
levels = c(1, 2, 3, 4),
labels = c("Spring", "Summer",
"Autumn", "Winter"));
dataBikes$weathersit <- factor(dataBikes$weathersit,
levels = c(1, 2, 3, 4),
labels = c("Clear skies", "Cloudy",
"Light rain", "Heavy rain"));
freqSeason <- table(dataBikes$season); # Shows each frequency of seasons
maxSeason <- names(freqSeason)[which.max(freqSeason)];
# Returns the most frequent season
freqWeathersit <- table(dataBikes$weathersit);
# Shows each frequency of weather situation
maxWeathersit <- names(freqWeathersit)[which.max(freqWeathersit)];
# Returns the most frequent weather situation
par(mfrow = c(1,2))
barplot(freqSeason,
col = "skyblue",
main = "Number of Records by Season",
ylab = "Count",
xlab = "Season",
ylim = c(0, 240)
)
barplot(freqWeathersit,
col = "lightgreen",
main = "Number of Records by Weather",
ylab = "Count",
xlab = "Weather",
ylim = c(0,550)
);
par(mfrow = c(1,1))
# ---- Item 4 ----#
dataBikes$totalUsers <- dataBikes$casual + dataBikes$registered;
# Calculates the number of total users per day
dataBikes$tempReal <- dataBikes$temp * 41;
# Converts the normalized temperature to its real value
par(mfrow = c(2,1))
plot(dataBikes$X, dataBikes$totalUsers, type = "l",
col = "brown", lwd = 2,
main = "Total User Count Over Time",
xlab = "Days (Index)", ylab = "Number of Users"
);
plot(dataBikes$X, dataBikes$temp, type = "l",
col = "red", lwd = 2,
main = "Temperature Trend Over Time",
xlab = "Days (Index)", ylab = "Temperature"
);
View(dataBikes)
plot(dataBikes$X, dataBikes$tempReal, type = "l",
col = "red", lwd = 2,
main = "Temperature Trend Over Time",
xlab = "Days (Index)", ylab = "Temperature"
);
par(mfrow = c(2,1))
plot(dataBikes$X, dataBikes$totalUsers, type = "l",
col = "brown", lwd = 2,
main = "Total User Count Over Time",
xlab = "Days (Index)", ylab = "Number of Users"
);
plot(dataBikes$X, dataBikes$tempReal, type = "l",
col = "red", lwd = 2,
main = "Temperature Trend Over Time",
xlab = "Days (Index)", ylab = "Temperature"
);
